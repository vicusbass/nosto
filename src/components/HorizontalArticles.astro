---
import { PortableText } from 'astro-portabletext';

export interface Article {
  _id?: string;
  id?: string;
  title?: string;
  slug?: { current: string } | string;
  text?: any;
  image?: any;
  imageUrl?: string;
}

interface Props {
  articles: Article[];
  sectionId?: string;
  containerClass?: string;
  articleClass?: string;
  imageContainerClass?: string;
  contentClass?: string;
  titleClass?: string;
  textClass?: string;
  sectionClass?: string;
}

const {
  articles,
  sectionId = 'articles',
  containerClass = '',
  articleClass = '',
  imageContainerClass = '',
  contentClass = '',
  titleClass = '',
  textClass = '',
  sectionClass = '',
} = Astro.props;

// Default classes
const defaultContainerClass = 'flex overflow-x-auto pb-6 no-scrollbar snap-x snap-mandatory';
const defaultArticleClass =
  'overflow-hidden shadow-sm hover:shadow-md transition-shadow duration-300 mobile-card-width md:w-[525px] h-auto sm:h-[507px] flex flex-col flex-shrink-0 ml-0 mr-6 md:ml-0 md:mr-6 last:mr-6 md:last:mr-0';
const defaultImageContainerClass = 'w-full h-[50vw] sm:h-[40vw] md:h-[348px] overflow-hidden';
const defaultContentClass = 'p-3 flex-1 overflow-hidden';
const defaultTitleClass =
  'text-2xl font-light mb-3 text-gray-900 hover:text-orange-500 transition-colors duration-200 line-clamp-2';
const defaultTextClass =
  'text-gray-600 text-base leading-relaxed prose prose-base max-w-none line-clamp-3';
---

<style>
  @media (max-width: 767px) {
    .mobile-card-width {
      width: calc(100vw - 3rem);
    }
  }
</style>

<section id={sectionId} class={`${sectionClass}`}>
  <!-- Horizontal scrolling articles container -->
  <div class="relative overflow-x-hidden">
    <!-- Left scroll arrow -->
    <button
      class="scroll-left absolute left-4 top-1/2 -translate-y-1/2 z-10 bg-white/20 hover:bg-white/40 rounded-full p-3 transition-all duration-300 backdrop-blur-sm md:flex hidden items-center justify-center"
      aria-label="Scroll left"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="text-gray-800"
      >
        <path d="m15 18-6-6 6-6"></path>
      </svg>
    </button>

    <!-- Mobile left scroll arrow -->
    <button
      class="scroll-left-mobile absolute left-2 top-1/2 -translate-y-1/2 z-10 bg-white/80 hover:bg-white rounded-full p-2 shadow-md md:hidden"
      aria-label="Scroll left"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="20"
        height="20"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
      >
        <path d="m15 18-6-6 6-6"></path>
      </svg>
    </button>

    <div
      class={`articles-container ${defaultContainerClass} ${containerClass}`}
      style="-webkit-overflow-scrolling: touch;"
    >
      {
        articles.map((article: Article) => {
          const imageUrl = article.imageUrl || (article.image ? '' : null);

          return (
            <article
              class={`${defaultArticleClass} ${articleClass}`}
              style="scroll-snap-align: center;"
            >
              {imageUrl && (
                <div class={`${defaultImageContainerClass} ${imageContainerClass}`}>
                  <img
                    src={imageUrl}
                    alt={article.title}
                    class="w-full h-full object-cover hover:scale-105 transition-transform duration-300"
                  />
                </div>
              )}
              <div class={`${defaultContentClass} ${contentClass}`}>
                <h2 class={`${defaultTitleClass} ${titleClass}`}>{article.title}</h2>
                <div class={`${defaultTextClass} ${textClass}`}>
                  {typeof article.text === 'string' ? (
                    article.text
                  ) : article.text && Array.isArray(article.text) ? (
                    <PortableText value={article.text} components={{}} />
                  ) : null}
                </div>
              </div>
            </article>
          );
        })
      }
    </div>

    <!-- Right scroll arrow -->
    <button
      class="scroll-right absolute right-0 top-1/2 -translate-y-1/2 z-10 bg-white/20 hover:bg-white/40 rounded-full p-3 transition-all duration-300 backdrop-blur-sm md:flex hidden items-center justify-center"
      aria-label="Scroll right"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="text-gray-800"
      >
        <path d="m9 18 6-6-6-6"></path>
      </svg>
    </button>

    <!-- Mobile right scroll arrow -->
    <button
      class="scroll-right-mobile absolute right-2 top-1/2 -translate-y-1/2 z-10 bg-white/80 hover:bg-white rounded-full p-2 shadow-md md:hidden"
      aria-label="Scroll right"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="20"
        height="20"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
      >
        <path d="m9 18 6-6-6-6"></path>
      </svg>
    </button>
  </div>
</section>

<script>
  // Function to initialize the scroll arrows for a specific section
  function initScrollArrows(sectionId = 'articles') {
    const section = document.getElementById(sectionId);
    if (!section) return;

    const container = section.querySelector('.articles-container');
    const leftBtn = section.querySelector('.scroll-left');
    const rightBtn = section.querySelector('.scroll-right');
    const leftBtnMobile = section.querySelector('.scroll-left-mobile');
    const rightBtnMobile = section.querySelector('.scroll-right-mobile');
    const articles = container?.querySelectorAll('article');

    if (container && articles?.length) {
      const isMobile = () => window.innerWidth < 768;

      // Function to scroll to a specific article
      const scrollToArticle = (index) => {
        if (articles[index]) {
          if (isMobile()) {
            // Mobile: jump to card
            articles[index].scrollIntoView({
              behavior: 'smooth',
              block: 'nearest',
              inline: 'start',
            });
          } else {
            // Desktop: smooth scroll to bring next card into view
            const articleRect = articles[index].getBoundingClientRect();
            const containerRect = container.getBoundingClientRect();
            const scrollAmount = articleRect.left - containerRect.left + container.scrollLeft - 16; // 16px offset

            container.scrollTo({
              left: scrollAmount,
              behavior: 'smooth',
            });
          }
        }
      };

      // Find the current centered article index
      const getCurrentArticleIndex = () => {
        const containerRect = container.getBoundingClientRect();
        const containerCenter = containerRect.left + containerRect.width / 2;

        let closestIndex = 0;
        let closestDistance = Number.MAX_VALUE;

        articles.forEach((article, index) => {
          const articleRect = article.getBoundingClientRect();
          const articleCenter = articleRect.left + articleRect.width / 2;
          const distance = Math.abs(containerCenter - articleCenter);

          if (distance < closestDistance) {
            closestDistance = distance;
            closestIndex = index;
          }
        });

        return closestIndex;
      };

      // Get the leftmost visible article index for desktop
      const getLeftmostVisibleIndex = () => {
        const containerRect = container.getBoundingClientRect();
        const containerLeft = containerRect.left;

        for (let i = 0; i < articles.length; i++) {
          const articleRect = articles[i].getBoundingClientRect();
          if (articleRect.right > containerLeft + 50) {
            // 50px threshold
            return i;
          }
        }
        return 0;
      };

      // Handle left arrow click
      const handleLeftClick = () => {
        if (isMobile()) {
          const currentIndex = getCurrentArticleIndex();
          const prevIndex = Math.max(0, currentIndex - 1);
          scrollToArticle(prevIndex);
        } else {
          const currentIndex = getLeftmostVisibleIndex();
          const prevIndex = Math.max(0, currentIndex - 1);
          scrollToArticle(prevIndex);
        }
      };

      // Handle right arrow click
      const handleRightClick = () => {
        if (isMobile()) {
          const currentIndex = getCurrentArticleIndex();
          const nextIndex = Math.min(articles.length - 1, currentIndex + 1);
          scrollToArticle(nextIndex);
        } else {
          const currentIndex = getLeftmostVisibleIndex();
          const nextIndex = Math.min(articles.length - 1, currentIndex + 1);
          scrollToArticle(nextIndex);
        }
      };

      // Add event listeners
      if (leftBtn) {
        leftBtn.removeEventListener('click', handleLeftClick);
        leftBtn.addEventListener('click', handleLeftClick);
      }
      if (rightBtn) {
        rightBtn.removeEventListener('click', handleRightClick);
        rightBtn.addEventListener('click', handleRightClick);
      }
      if (leftBtnMobile) {
        leftBtnMobile.removeEventListener('click', handleLeftClick);
        leftBtnMobile.addEventListener('click', handleLeftClick);
      }
      if (rightBtnMobile) {
        rightBtnMobile.removeEventListener('click', handleRightClick);
        rightBtnMobile.addEventListener('click', handleRightClick);
      }

      // Show/hide arrows based on scroll position
      const updateArrowVisibility = () => {
        const isAtStart = container.scrollLeft <= 10;
        const isAtEnd = container.scrollLeft >= container.scrollWidth - container.clientWidth - 10;

        // Desktop arrows
        if (leftBtn) leftBtn.style.opacity = isAtStart ? '0.3' : '1';
        if (rightBtn) rightBtn.style.opacity = isAtEnd ? '0.3' : '1';

        // Mobile arrows
        if (leftBtnMobile) leftBtnMobile.style.opacity = isAtStart ? '0.3' : '1';
        if (rightBtnMobile) rightBtnMobile.style.opacity = isAtEnd ? '0.3' : '1';
      };

      // Initial visibility
      updateArrowVisibility();

      // Update on scroll
      container.addEventListener('scroll', () => {
        requestAnimationFrame(updateArrowVisibility);
      });

      // Update on resize
      window.addEventListener('resize', updateArrowVisibility);
    }
  }

  // Initialize all horizontal articles sections
  function initAllHorizontalArticles() {
    const sections = document.querySelectorAll('section[id*="articles"]');
    sections.forEach((section) => {
      if (section.id) {
        initScrollArrows(section.id);
      }
    });
  }

  // Initialize on page load
  document.addEventListener('DOMContentLoaded', initAllHorizontalArticles);

  // Re-initialize on Astro view transitions
  document.addEventListener('astro:page-load', initAllHorizontalArticles);
  document.addEventListener('astro:after-swap', initAllHorizontalArticles);
</script>
