---
import { PortableText } from 'astro-portabletext';
import ScrollArrowController from './ScrollArrowController.astro';

export interface Article {
  _id?: string;
  id?: string;
  title?: string;
  slug?: { current: string } | string;
  text?: any;
  image?: any;
  imageUrl?: string;
}

interface Props {
  articles: Article[];
  sectionId?: string;
  containerClass?: string;
  articleClass?: string;
  imageContainerClass?: string;
  contentClass?: string;
  titleClass?: string;
  textClass?: string;
  sectionClass?: string;
}

const {
  articles,
  sectionId = 'articles',
  containerClass = '',
  articleClass = '',
  imageContainerClass = '',
  contentClass = '',
  titleClass = '',
  textClass = '',
  sectionClass = '',
} = Astro.props;

// Default classes
const defaultContainerClass = 'flex overflow-x-auto pb-6 no-scrollbar snap-x snap-mandatory';
const defaultArticleClass =
  'overflow-hidden shadow-sm hover:shadow-md transition-shadow duration-300 mobile-card-width md:w-[525px] h-auto sm:h-[507px] flex flex-col flex-shrink-0 ml-0 mr-6 md:ml-0 md:mr-6 last:mr-6 md:last:mr-0 py-8 min-h-[370px] md:py-0 md:min-h-0';
const defaultImageContainerClass = 'w-full h-[50vw] sm:h-[40vw] md:h-[348px] overflow-hidden';
const defaultContentClass = 'p-3 flex-1 overflow-hidden';
const defaultTitleClass =
  'text-2xl font-light mb-3 text-gray-900 hover:text-orange-500 transition-colors duration-200 line-clamp-2';
const defaultTextClass =
  'text-gray-600 text-base leading-relaxed prose prose-base max-w-none md:line-clamp-3 text-justify';
---

<style>
  @media (max-width: 767px) {
    .mobile-card-width {
      width: calc(100vw - 3rem);
    }
  }
</style>

<section id={sectionId} class={`${sectionClass}`}>
  <!-- Horizontal scrolling articles container -->
  <div class="relative overflow-x-hidden">
    <ScrollArrowController
      containerSelector={`#${sectionId} .articles-container`}
      scrollAmount={525}
      showMobileArrows={true}
      arrowSize="large"
    />

    <div
      class={`articles-container ${defaultContainerClass} ${containerClass}`}
      style="-webkit-overflow-scrolling: touch;"
    >
      {
        articles.map((article: Article) => {
          const imageUrl = article.imageUrl || (article.image ? '' : null);

          return (
            <article
              class={`${defaultArticleClass} ${articleClass}`}
              style="scroll-snap-align: center;"
            >
              {imageUrl && (
                <div class={`${defaultImageContainerClass} ${imageContainerClass}`}>
                  <img
                    src={imageUrl}
                    alt={article.title}
                    class="w-full h-full object-cover hover:scale-105 transition-transform duration-300"
                  />
                </div>
              )}
              <div class={`${defaultContentClass} ${contentClass}`}>
                <h2 class={`${defaultTitleClass} ${titleClass}`}>{article.title}</h2>
                <div class={`${defaultTextClass} ${textClass}`}>
                  {typeof article.text === 'string' ? (
                    article.text
                  ) : article.text && Array.isArray(article.text) ? (
                    <PortableText value={article.text} components={{}} />
                  ) : null}
                </div>
              </div>
            </article>
          );
        })
      }
    </div>
  </div>
</section>
