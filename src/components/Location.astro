---
import { Icon } from 'astro-icon/components';
import config from '../config/map';

interface Props {
  showGoogleMapsLink?: boolean;
}

const { showGoogleMapsLink = true } = Astro.props;
---

<!-- Load Leaflet CSS with low priority to not block rendering -->
<link
  rel="preload"
  href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
  as="style"
  onload="this.onload=null;this.rel='stylesheet'"
  integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
  crossorigin=""
/>
<noscript>
  <link
    rel="stylesheet"
    href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
    integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
    crossorigin=""
  />
</noscript>

<section class="py-0 bg-gray-100">
  <div class="w-full relative h-[60vh] min-h-[400px]">
    <!-- Map container with buttons positioned absolutely inside -->
    <div
      id="leaflet-map"
      class="leaflet-map rounded shadow"
      data-config={JSON.stringify(config)}
      role="img"
      aria-label={`Hartă cu locația ${config.title}`}
    >
    </div>
    <div class="absolute top-4 left-4 flex space-x-2">
      <button
        id="zoom-city"
        class="btn-primary map-btn transition"
        data-zoom="13"
        aria-label="VEDERE ORAȘ"
      >
        VEDERE ORAȘ
      </button>
      <button
        id="zoom-area"
        class="btn-primary map-btn selected transition"
        data-zoom="16"
        aria-label="VEDERE ZONĂ"
      >
        VEDERE ZONĂ
      </button>
    </div>
    <!-- Google Maps link button (conditionally rendered) -->
    {
      showGoogleMapsLink && (
        <a
          href={config.googleMapsLink}
          target="_blank"
          rel="noopener noreferrer"
          class="btn-primary map-btn transition absolute bottom-4 left-4"
          aria-label="Deschide locația în Google Maps"
        >
          VEZI PE GOOGLE MAPS
        </a>
      )
    }
  </div>
</section>
<section id="location-details" class="bg-tab-secondary py-6 mt-8">
  <div class="w-full">
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-0">
      {
        config.locationDetails.map((item) => (
          <div class="flex items-center p-1 pl-4">
            <div class="w-12 h-12 bg-white mr-3 flex-shrink-0 flex items-center justify-center">
              <Icon name={item.icon} class="w-8 h-8" />
            </div>
            <div>
              <h3 class="font-medium text-base font-heading">{item.title}</h3>
              <p class="text-sm">{item.details}</p>
            </div>
          </div>
        ))
      }
    </div>
  </div>
</section>

<style>
  .leaflet-map {
    width: 100%;
    height: 100%;
    z-index: 0;
  }

  @media (min-width: 768px) {
    .map-btn:not(.selected):hover {
      transform: translateY(-2px);
    }
  }

  .map-btn.selected {
    background-color: white;
    color: black;
    pointer-events: none;
  }
</style>

<!-- Load Leaflet JS with defer to not block rendering -->
<script defer src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" crossorigin=""></script>

<script is:inline>
  let mapInstance = null;

  function initializeLeafletMap() {
    const mapContainer = document.getElementById('leaflet-map');

    if (!mapContainer) {
      return;
    }

    const configData = mapContainer.getAttribute('data-config');
    if (!configData) {
      console.error('Leaflet map data-config attribute not found.');
      return;
    }

    const { center, title } = JSON.parse(configData);

    if (!center || !title) {
      console.error('Map configuration (center, title) is missing or invalid in data-config.');
      return;
    }

    if (typeof L === 'undefined') {
      // If Leaflet isn't loaded yet, wait a bit and try again
      setTimeout(initializeLeafletMap, 100);
      return;
    }

    if (mapInstance) {
      mapInstance.remove();
      mapInstance = null;
    }

    // Initialize the map
    mapInstance = L.map('leaflet-map', {
      center,
      zoom: 16,
      scrollWheelZoom: false,
      zoomControl: false,
      attributionControl: false,
      closePopupOnClick: false,
      dragging: false,
      doubleClickZoom: false,
      boxZoom: false,
      keyboard: false,
      renderer: L.canvas(),
    });

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      maxZoom: 19,
    }).addTo(mapInstance);

    const marker = L.marker(center).addTo(mapInstance);

    // Force map to recalculate size
    setTimeout(() => {
      if (mapInstance) {
        mapInstance.invalidateSize();
      }
    }, 100);

    const zoomCityButton = document.getElementById('zoom-city');
    const zoomAreaButton = document.getElementById('zoom-area');

    if (zoomCityButton) {
      zoomCityButton.onclick = () => {
        if (mapInstance) {
          mapInstance.flyTo(center, 13, {
            duration: 2,
            easeLinearity: 0.1,
          });
        }
        zoomCityButton.classList.add('selected');
        zoomAreaButton?.classList.remove('selected');
      };
    }

    if (zoomAreaButton) {
      zoomAreaButton.onclick = () => {
        if (mapInstance) {
          mapInstance.flyTo(center, 16, {
            duration: 2,
            easeLinearity: 0.1,
          });
        }
        zoomAreaButton.classList.add('selected');
        zoomCityButton?.classList.remove('selected');
      };
    }
  }

  // Initialize on page load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeLeafletMap);
  } else {
    initializeLeafletMap();
  }

  // Initialize on client-side navigation
  document.addEventListener('astro:page-load', initializeLeafletMap);
</script>
