---
import type { SanityImageSource } from '@sanity/image-url/lib/types/types';
import Layout from '../../layouts/Layout.astro';
import { sanityClient } from 'sanity:client';
import urlForImage from '../../utils/sanityImageUrl';
import { Image } from 'astro:assets';
import { Icon } from 'astro-icon/components';
import SectionTitle from '../../components/SectionTitle.astro';
import FAQ from '../../components/FAQ.astro';
import Finish from '../../components/Finish.astro';
import Dotari from '../../components/Dotari.astro';

// Define the unit type
type UnitType = {
  name: string;
  price: number;
  floorName: string;
  type: string;
  size: number;
  images: SanityImageSource[];
  description?: string;
  rooms?: Array<{ name: string; surface: number }>;
  plan?: any;
  planUrl?: string;
};

export const prerender = true;

export async function getStaticPaths() {
  const UNITS_QUERY = `*[_type == "unit" && defined(uniqueId)]{
    "params": {"unitid": uniqueId}
  }`;
  const paths = await sanityClient.fetch<{ params: { unitid: string } }[]>(UNITS_QUERY);
  return paths;
}

const { unitid } = Astro.params;
let unit: UnitType | null = null;
let fetchError: string | null = null;

if (!unitid) {
  Astro.response.status = 400;
  fetchError = 'ID-ul apartamentului lipsește din URL.';
} else {
  try {
    const query = `*[_type == "unit" && uniqueId == $unitid][0] {
      name,
      price,
      "floorName": floor->name,
      type,
      size,
      images,
      description,
      rooms,
      plan,
      "planUrl": plan.asset->url
    }`;
    unit = await sanityClient.fetch(query, { unitid });

    // Filter out images that don't have valid asset references
    if (unit && unit.images) {
      unit.images = unit.images.filter((img: any) => {
        return img && typeof img === 'object' && 'asset' in img && img.asset && !('_upload' in img);
      });
    }

    // console.log(JSON.stringify(unit, null, 2));
  } catch (e) {
    console.error('Sanity fetch error:', e);
    Astro.response.status = 500;
    fetchError = 'Eroare la încărcarea datelor apartamentului.';
  }
}

let pageTitle = 'Detalii Apartament - Nosto';
if (unit) {
  pageTitle = `Apartament ${unit.name} - Nosto`;
} else if (!fetchError) {
  Astro.response.status = 404;
  fetchError = `Apartamentul cu ID "${unitid}" nu a fost găsit.`;
}
---

<Layout title={pageTitle}>
  <a
    href="/apartamente"
    class="px-6 pt-6 inline-block text-primary hover:underline font-medium font-heading"
  >
    &larr; ÎNAPOI
  </a>
  <section class="font-heading bg-tab-secondary">
    {
      fetchError && (
        <div class="text-center text-red-500 bg-red-100 p-6 shadow-md">
          <p class="text-xl font-semibold mb-2">Eroare</p>
          <p>{fetchError}</p>
        </div>
      )
    }

    {
      unit && !fetchError && (
        <div>
          <div class="flex flex-col lg:flex-row gap-4 p-4 lg:p-8 lg:items-start">
            {/* Left column - Room details and pricing */}
            <div id="room-details" class="lg:w-1/4 flex flex-col gap-6 order-2 lg:order-1">
              {/* Room details */}
              <div id="room-data" class="bg-white/80 p-6 w-full">
                {unit.rooms && unit.rooms.length > 0 ? (
                  <>
                    {unit.rooms.map((room: { name: string; surface: number }, index: number) => (
                      <div
                        class={`flex justify-between py-3 ${index === (unit.rooms?.length ?? 0) - 1 ? '' : 'border-b border-gray-200'}`}
                      >
                        <span>{room.name}</span>
                        <span>{room.surface}mp</span>
                      </div>
                    ))}

                    <div class="flex justify-between py-3 mt-4 border-t border-gray-400 font-semibold">
                      <span>Suprafață utilă</span>
                      <span>{unit.size}mp</span>
                    </div>
                  </>
                ) : (
                  <div class="flex justify-between py-3 border-b border-gray-200">
                    <span>Suprafață utilă</span>
                    <span>{unit.size}mp</span>
                  </div>
                )}
              </div>
              {/* PDF Download Button */}
              {unit.planUrl && (
                <div class="mt-6 flex justify-center">
                  <a
                    href={unit.planUrl}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="flex btn-primary transition-colors"
                  >
                    <Icon name="mdi:file-pdf-box" class="w-6 h-6" />
                    Descarcă planul
                  </a>
                </div>
              )}

              {/* Pricing information */}
              {unit.price && (
                <div class="p-6">
                  <p class="text-center text-lg">Preț apartament finisat FĂRĂ TVA</p>
                  <p class="text-center text-4xl md:text-6xl font-light mt-2">
                    {new Intl.NumberFormat('ro-RO').format(unit.price)}€
                  </p>
                </div>
              )}
            </div>

            {/* Middle - Floor plan image */}
            <div
              id="images"
              class="lg:w-3/5 bg-white px-4 pt-4 pb-4 flex flex-col order-1 lg:order-2"
            >
              {/* Apartment info at the top */}
              <div class="flex justify-center items-center gap-2 text-center mb-6 font-light">
                <h1 class="text-2xl md:text-4xl">{unit.name}</h1>
                <span class="mx-2 md:mx-6" />
                <span>{unit.type === 'C' ? 'COMERCIAL' : `${unit.type} CAMERE`}</span>
                <span class="mx-2 md:mx-6">|</span>
                <span>{unit.size} MP</span>
                <span class="mx-2 md:mx-6">|</span>
                <span>ETAJ {unit.floorName}</span>
              </div>

              {/* Floor plan image */}
              <div class="flex items-center justify-center">
                {unit.images && unit.images.length > 0 && (
                  <Image
                    id="main-image"
                    src={
                      urlForImage(unit.images[0])
                        ?.auto('format')
                        .width(1200)
                        .height(900)
                        .quality(85)
                        .url() || ''
                    }
                    alt={`Plan apartament ${unit.name}`}
                    class="max-w-full h-auto cursor-pointer lg:cursor-default"
                    width={1200}
                    height={900}
                  />
                )}
              </div>

              {/* Mobile image gallery - only visible on mobile */}
              <div class="lg:hidden mt-4">
                {unit.images && unit.images.length > 1 && (
                  <div class="relative">
                    <div
                      id="mobile-gallery"
                      class="flex gap-3 overflow-x-auto scrollbar-hide pb-2"
                      style="scroll-behavior: smooth; -webkit-overflow-scrolling: touch;"
                    >
                      {unit.images.map((image: SanityImageSource, index: number) => (
                        <div
                          class={`flex-shrink-0 cursor-pointer transition-all duration-200 ${index === 0 ? 'ring-2 ring-primary' : ''}`}
                          data-mobile-thumbnail-index={index}
                          data-mobile-image-src={urlForImage(image)?.url() || ''}
                          data-mobile-image-alt={`Imagine ${index + 1} apartament ${unit.name}`}
                        >
                          <Image
                            src={urlForImage(image)?.width(120).height(120).url() || ''}
                            alt={`Imagine ${index + 1} apartament ${unit.name}`}
                            class="w-20 h-20 object-cover rounded-md"
                            width={120}
                            height={120}
                          />
                        </div>
                      ))}
                    </div>

                    {/* Scroll arrow indicator */}
                    <div
                      id="scroll-arrow"
                      class="absolute right-2 top-1/2 transform -translate-y-1/2 bg-primary text-white rounded-full w-8 h-8 flex items-center justify-center shadow-lg animate-pulse"
                    >
                      <Icon name="mdi:chevron-right" class="w-5 h-5" />
                    </div>
                  </div>
                )}
              </div>
            </div>

            {/* Right column - Image thumbnails - hidden on mobile */}
            <div
              id="desktop-thumbs"
              class="hidden lg:flex lg:w-1/6 bg-white/80 p-4 flex-col gap-4 order-3 relative overflow-hidden self-start"
            >
              {unit.images && unit.images.length > 0 ? (
                <div
                  id="desktop-thumbs-scroll"
                  class="flex-1 flex flex-col gap-3 overflow-y-auto no-scrollbar pb-12"
                >
                  {unit.images.map((image: SanityImageSource, index: number) => (
                    <div
                      class={`cursor-pointer hover:opacity-80 transition-all duration-200 aspect-square w-full border-2 ${index === 0 ? 'border-primary' : 'border-transparent'} hover:border-primary/50`}
                      data-thumbnail-index={index}
                      data-image-src={urlForImage(image)?.url() || ''}
                      data-image-alt={`Imagine ${index + 1} apartament ${unit.name}`}
                    >
                      <Image
                        src={urlForImage(image)?.width(200).height(200).url() || ''}
                        alt={`Imagine ${index + 1} apartament ${unit.name}`}
                        class="w-full h-full object-cover rounded-sm"
                        width={200}
                        height={200}
                      />
                    </div>
                  ))}
                </div>
              ) : (
                <p class="text-center text-sm text-gray-500">Nu există imagini disponibile</p>
              )}

              {/* Scroll arrow indicator for desktop thumbnails */}
              <div
                id="thumbs-scroll-arrow"
                class="hidden lg:flex absolute bottom-2 left-1/2 -translate-x-1/2 bg-[var(--color-main-btn)] text-white rounded-full w-8 h-8 items-center justify-center shadow-lg animate-pulse"
                aria-hidden="true"
              >
                <Icon name="mdi:chevron-down" class="w-5 h-5" />
              </div>
            </div>
          </div>
        </div>
      )
    }
  </section>

  <!-- Image Modal for Mobile -->
  <div
    id="image-modal"
    class="fixed inset-0 bg-black bg-opacity-90 z-50 items-center justify-center p-4 hidden"
  >
    <div class="relative max-w-full max-h-full">
      <button
        id="close-modal"
        class="absolute top-4 right-4 text-white bg-black bg-opacity-50 rounded-full w-10 h-10 flex items-center justify-center hover:bg-opacity-75 transition-all"
        aria-label="Close"
      >
        <Icon name="mdi:close" class="w-6 h-6" />
      </button>
      <img id="modal-image" src="" alt="" class="max-w-full max-h-full object-contain" />
    </div>
  </div>
  <SectionTitle title="Pachete finisaje și dotări" class="mt-8" />
  <Finish />
  <!-- <Dotari /> -->
  <SectionTitle title="Întrebări frecvente" />
  <FAQ />

  <style>
    /* Hide scrollbar for mobile gallery */
    .scrollbar-hide {
      -ms-overflow-style: none;
      scrollbar-width: none;
    }

    .scrollbar-hide::-webkit-scrollbar {
      display: none;
    }

    /* Hide scrollbar for desktop thumbs scroll area */
    #desktop-thumbs-scroll.no-scrollbar {
      -ms-overflow-style: none;
      scrollbar-width: none;
    }

    #desktop-thumbs-scroll.no-scrollbar::-webkit-scrollbar {
      display: none;
    }

    /* Smooth scrolling for mobile gallery */
    #mobile-gallery {
      scroll-snap-type: x mandatory;
    }

    #mobile-gallery > div {
      scroll-snap-align: start;
    }
  </style>

  <script is:inline>
    // Image gallery functionality
    function initializeImageGallery() {
      // console.log('Initializing image gallery...');

      const mainImage = document.getElementById('main-image');
      const thumbnails = document.querySelectorAll('[data-thumbnail-index]');
      const mobileThumbnails = document.querySelectorAll('[data-mobile-thumbnail-index]');
      const mobileGallery = document.getElementById('mobile-gallery');
      const scrollArrow = document.getElementById('scroll-arrow');
      const desktopThumbs = document.getElementById('desktop-thumbs');
      const desktopThumbsScroll = document.getElementById('desktop-thumbs-scroll');
      const thumbsScrollArrow = document.getElementById('thumbs-scroll-arrow');
      const imagesContainer = document.getElementById('images');
      const leftColumn = document.getElementById('room-details');

      if (!mainImage) return;

      // Sync height - make right column match middle column's image content height
      function syncHeights() {
        if (imagesContainer && desktopThumbs && window.innerWidth >= 1024) {
          // Simply match the middle column's height
          const imagesContainerHeight = imagesContainer.offsetHeight;
          desktopThumbs.style.height = imagesContainerHeight + 'px';
        } else if (desktopThumbs && window.innerWidth < 1024) {
          // Reset height on mobile
          desktopThumbs.style.height = 'auto';
        }
      }

      // Initialize height sync
      syncHeights();

      // Sync heights when main image loads
      if (mainImage) {
        mainImage.addEventListener('load', syncHeights);
      }

      // Sync on window resize
      window.addEventListener('resize', syncHeights);
      // Desktop thumbs scroll hint behavior
      if (desktopThumbsScroll && thumbsScrollArrow) {
        function updateThumbsArrowVisibility() {
          const atBottom =
            desktopThumbsScroll.scrollTop + desktopThumbsScroll.clientHeight >=
            desktopThumbsScroll.scrollHeight - 4;
          const hasOverflow =
            desktopThumbsScroll.scrollHeight > desktopThumbsScroll.clientHeight + 2;
          thumbsScrollArrow.style.display = hasOverflow && !atBottom ? 'flex' : 'none';
        }

        updateThumbsArrowVisibility();
        desktopThumbsScroll.addEventListener('scroll', updateThumbsArrowVisibility);
        window.addEventListener('resize', updateThumbsArrowVisibility);

        thumbsScrollArrow.addEventListener('click', function (event) {
          event.preventDefault();
          desktopThumbsScroll.scrollBy({ top: 160, behavior: 'smooth' });
        });
      }

      // Desktop thumbnail functionality
      function updateDesktopActiveState(activeIndex) {
        thumbnails.forEach((thumb, index) => {
          if (index === activeIndex) {
            thumb.classList.remove('border-transparent');
            thumb.classList.add('border-primary');
          } else {
            thumb.classList.remove('border-primary');
            thumb.classList.add('border-transparent');
          }
        });
      }

      // Mobile thumbnail functionality
      function updateMobileActiveState(activeIndex) {
        mobileThumbnails.forEach((thumb, index) => {
          if (index === activeIndex) {
            thumb.classList.add('ring-2', 'ring-primary');
          } else {
            thumb.classList.remove('ring-2', 'ring-primary');
          }
        });
      }

      // Desktop thumbnails
      thumbnails.forEach((thumbnail, index) => {
        thumbnail.addEventListener('click', function () {
          const newSrc = this.dataset.imageSrc;
          const newAlt = this.dataset.imageAlt;

          if (newSrc && mainImage) {
            // Use the original URL with high quality parameters
            const formattedSrc = newSrc.replace(/\?.*$/, '') + '?auto=format&w=1200&h=900&q=85';
            mainImage.src = formattedSrc;
            mainImage.alt = newAlt;
            updateDesktopActiveState(index);
          }
        });
      });

      // Mobile thumbnails - add both click and touch events
      mobileThumbnails.forEach((thumbnail, index) => {
        function handleMobileThumbnailClick(event) {
          event.preventDefault();

          const newSrc = this.dataset.mobileImageSrc;
          const newAlt = this.dataset.mobileImageAlt;

          if (newSrc && mainImage) {
            // Use the original URL with high quality parameters
            const formattedSrc = newSrc.replace(/\?.*$/, '') + '?auto=format&w=1200&h=900&q=85';
            mainImage.src = formattedSrc;
            mainImage.alt = newAlt;
            updateMobileActiveState(index);
          }
        }

        // Add both click and touchend events for better mobile support
        thumbnail.addEventListener('click', handleMobileThumbnailClick);
        thumbnail.addEventListener('touchend', handleMobileThumbnailClick);
      });

      // Mobile scroll arrow functionality
      if (mobileGallery && scrollArrow) {
        // Hide arrow after user scrolls or clicks
        function hideScrollArrow() {
          scrollArrow.style.display = 'none';
        }

        // Hide arrow on scroll
        mobileGallery.addEventListener('scroll', hideScrollArrow);

        // Hide arrow on click and scroll to next image
        scrollArrow.addEventListener('click', function (event) {
          event.preventDefault();
          const scrollAmount = 100; // Adjust this value as needed
          mobileGallery.scrollBy({ left: scrollAmount, behavior: 'smooth' });
          hideScrollArrow();
        });

        // Hide arrow on touch
        scrollArrow.addEventListener('touchend', function (event) {
          event.preventDefault();
          const scrollAmount = 100;
          mobileGallery.scrollBy({ left: scrollAmount, behavior: 'smooth' });
          hideScrollArrow();
        });

        // Hide arrow when user taps on gallery
        mobileGallery.addEventListener('touchstart', hideScrollArrow);
      }

      // Mobile image modal functionality
      const imageModal = document.getElementById('image-modal');
      const modalImage = document.getElementById('modal-image');
      const closeModal = document.getElementById('close-modal');

      if (mainImage && imageModal && modalImage) {
        function openImageModal() {
          // Only open modal on mobile screens
          if (window.innerWidth >= 1024) return; // lg breakpoint

          modalImage.src = mainImage.src;
          modalImage.alt = mainImage.alt;
          imageModal.classList.remove('hidden');
          imageModal.classList.add('flex');
          document.body.style.overflow = 'hidden'; // Prevent background scrolling
        }

        function closeImageModal() {
          imageModal.classList.add('hidden');
          imageModal.classList.remove('flex');
          document.body.style.overflow = ''; // Restore scrolling
        }

        mainImage.addEventListener('click', openImageModal);
        mainImage.addEventListener('touchend', function (event) {
          event.preventDefault();
          openImageModal();
        });

        // Close modal events
        if (closeModal) {
          closeModal.addEventListener('click', closeImageModal);
          closeModal.addEventListener('touchend', function (event) {
            event.preventDefault();
            closeImageModal();
          });
        }

        // Close modal when clicking outside the image
        imageModal.addEventListener('click', function (event) {
          if (event.target === imageModal) {
            closeImageModal();
          }
        });

        // Close modal with escape key
        document.addEventListener('keydown', function (event) {
          if (event.key === 'Escape' && !imageModal.classList.contains('hidden')) {
            closeImageModal();
          }
        });
      }
    }

    // Initialize on both page load events
    document.addEventListener('astro:page-load', initializeImageGallery);
    document.addEventListener('astro:after-swap', initializeImageGallery);

    // Also initialize on DOMContentLoaded as fallback
    document.addEventListener('DOMContentLoaded', initializeImageGallery);
  </script>
</Layout>
