---
import type { SanityImageSource } from '@sanity/image-url/lib/types/types';
import Layout from '../../layouts/Layout.astro';
import { sanityClient } from 'sanity:client';
import urlForImage from '../../utils/sanityImageUrl';
import { Image } from 'astro:assets';
import { Icon } from 'astro-icon/components';

export async function getStaticPaths() {
  const UNITS_QUERY = `*[_type == "unit" && defined(uniqueId)]{
    "params": {"unitid": uniqueId}
  }`;
  const paths = await sanityClient.fetch<{ params: { unitid: string } }[]>(UNITS_QUERY);
  return paths;
}

const { unitid } = Astro.params;
let unit = null;
let fetchError = null;

if (!unitid) {
  Astro.response.status = 400;
  fetchError = 'ID-ul apartamentului lipsește din URL.';
} else {
  try {
    const query = `*[_type == "unit" && uniqueId == $unitid][0] {
      name,
      price,
      "floorName": floor->name,
      type,
      size,
      images,
      description,
      rooms
    }`;
    unit = await sanityClient.fetch(query, { unitid });
  } catch (e) {
    console.error('Sanity fetch error:', e);
    Astro.response.status = 500;
    fetchError = 'Eroare la încărcarea datelor apartamentului.';
  }
}

let pageTitle = 'Detalii Apartament - Nosto';
if (unit) {
  pageTitle = `Apartament ${unit.name} - Nosto`;
} else if (!fetchError) {
  Astro.response.status = 404;
  fetchError = `Apartamentul cu ID "${unitid}" nu a fost găsit.`;
}
---

<Layout title={pageTitle}>
  <a
    href="/apartamente"
    class="px-6 pt-6 inline-block text-primary hover:underline font-medium font-heading"
  >
    &larr; ÎNAPOI
  </a>
  <section class="font-heading bg-secondary">
    {
      fetchError && (
        <div class="text-center text-red-500 bg-red-100 p-6 shadow-md">
          <p class="text-xl font-semibold mb-2">Eroare</p>
          <p>{fetchError}</p>
        </div>
      )
    }

    {
      unit && !fetchError && (
        <div class="mt-8">
          <div class="flex flex-col lg:flex-row gap-8 bg-secondary/30 p-4 lg:p-8">
            {/* Left column - Room details and pricing */}
            <div class="lg:w-1/3 flex flex-col gap-6">
              {/* Room details */}
              <div class="bg-white/80 p-6 w-full">
                {unit.rooms && unit.rooms.length > 0 ? (
                  <div>
                    {unit.rooms.map((room: { name: string; surface: number }, index: number) => (
                      <div
                        class={`flex justify-between py-3 ${index === unit.rooms.length - 1 ? '' : 'border-b border-gray-200'}`}
                      >
                        <span>{room.name}</span>
                        <span>{room.surface}mp</span>
                      </div>
                    ))}

                    <div class="flex justify-between py-3 mt-4 border-t border-gray-400 font-semibold">
                      <span>Suprafață utilă</span>
                      <span>{unit.size}mp</span>
                    </div>
                  </div>
                ) : (
                  <div>
                    <div class="flex justify-between py-3 border-b border-gray-200">
                      <span>Suprafață utilă</span>
                      <span>{unit.size}mp</span>
                    </div>
                  </div>
                )}
              </div>

              {/* Pricing information */}
              {unit.price && (
                <div class="p-6">
                  <p class="text-center text-lg">Preț apartament finisat</p>
                  <p class="text-center text-4xl md:text-6xl font-light mt-2">
                    {new Intl.NumberFormat('ro-RO').format(unit.price)}€
                  </p>
                </div>
              )}
            </div>

            {/* Right side - Floor plan image */}
            <div class="lg:w-2/3 bg-white p-4 flex flex-col">
              {/* Apartment info at the top */}
              <div class="text-center mb-6 font-light">
                <div class="flex justify-center items-center gap-2">
                  <h1 class="text-2xl md:text-4xl">{unit.name}</h1>
                  <span class="mx-2 md:mx-6" />
                  <span>{unit.type === 'C' ? 'COMERCIAL' : `${unit.type} CAMERE`}</span>
                  <span class="mx-2 md:mx-6">|</span>
                  <span>{unit.size} MP</span>
                  <span class="mx-2 md:mx-6">|</span>
                  <span>ETAJ {unit.floorName}</span>
                </div>
              </div>

              {/* Floor plan image */}
              <div class="flex items-center justify-center flex-grow">
                {unit.images && unit.images.length > 0 && (
                  <Image
                    src={urlForImage(unit.images[0])?.url() || ''}
                    alt={`Plan apartament ${unit.name}`}
                    class="max-w-full h-auto"
                    width={800}
                    height={600}
                  />
                )}
              </div>
            </div>
          </div>
        </div>
      )
    }
  </section>
</Layout>
