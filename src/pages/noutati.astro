---
import type { SanityDocument } from '@sanity/client';
import { sanityClient } from 'sanity:client';
import { Image } from 'astro:assets';
import { PortableText } from 'astro-portabletext';
import Layout from '../layouts/Layout.astro';
import SectionTitle from '../components/SectionTitle.astro';
import urlForImage from '../utils/sanityImageUrl';

const POSTS_QUERY = `*[
  _type == "newsPost"
  && defined(slug.current)
]|order(date desc)[0...12]{_id, title, slug, date, text, image}`;

const posts = await sanityClient.fetch<SanityDocument[]>(POSTS_QUERY);
---

<Layout title="Noutati - Nosto">
  <section id="hero" class="section-x-padding py-8">
    <div class="w-full h-[300px] relative overflow-hidden bg-gray-200 rounded-tr-[6rem]">
      <!-- Placeholder hero image -->
      <Image
        src="https://placehold.co/1600x300/orange/white?text=Noutati+Hero+Image"
        alt="News hero"
        class="w-full h-full object-cover"
        inferSize={true}
      />
      <div class="absolute inset-0 flex items-center justify-center bg-gray-200 bg-opacity-30">
        <h2 class="font-medium text-center">Stadiu È˜antier</h2>
      </div>
    </div>
    <p class="pt-8">
      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut
      labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco
      laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in
      voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat
      non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
    </p>
  </section>

  <SectionTitle title="Timeline" id="timeline-title" />

  <section id="articles" class="relative">
    <!-- Horizontal scrolling news container -->
    <div class="relative">
      <!-- Left scroll arrow -->
      <button
        id="scroll-left"
        class="absolute left-4 top-1/2 -translate-y-1/2 z-10 bg-white/20 hover:bg-white/40 rounded-full p-3 transition-all duration-300 backdrop-blur-sm md:flex hidden items-center justify-center"
        aria-label="Scroll left"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          class="text-gray-800"
        >
          <path d="m15 18-6-6 6-6"></path>
        </svg>
      </button>

      <!-- Mobile left scroll arrow -->
      <button
        id="scroll-left-mobile"
        class="absolute left-2 top-1/2 -translate-y-1/2 z-10 bg-white/80 hover:bg-white rounded-full p-2 shadow-md md:hidden"
        aria-label="Scroll left"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="20"
          height="20"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
        >
          <path d="m15 18-6-6 6-6"></path>
        </svg>
      </button>

      <div
        id="articles-container"
        class="flex overflow-x-auto pb-6 no-scrollbar snap-x snap-mandatory scroll-px-4 md:pl-4"
        style="-webkit-overflow-scrolling: touch;"
      >
        {
          posts.map((post: SanityDocument) => {
            const imageUrl = post?.image ? urlForImage(post.image)?.url() : null;
            return (
              <article
                class="overflow-hidden shadow-sm hover:shadow-md transition-shadow duration-300 w-[90vw] sm:w-[80vw] md:w-[525px] h-auto sm:h-[507px] flex flex-col flex-shrink-0 mx-3 md:first:ml-0 md:last:mr-4"
                style="scroll-snap-align: center;"
              >
                <a href={`/noutati/${post.slug.current}`} class="block h-full">
                  {imageUrl && (
                    <div class="w-full h-[50vw] sm:h-[40vw] md:h-[348px] overflow-hidden">
                      <Image
                        src={imageUrl}
                        alt={post.title}
                        class="w-full h-full object-cover hover:scale-105 transition-transform duration-300"
                        inferSize={true}
                      />
                    </div>
                  )}
                  <div class="p-3 flex-1 overflow-hidden">
                    <h2 class="text-2xl font-light mb-3 text-gray-900 hover:text-orange-500 transition-colors duration-200 line-clamp-2">
                      {new Date(post.date).toLocaleString('ro-RO', {
                        month: 'long',
                        year: 'numeric',
                      })}
                    </h2>
                    <div class="text-gray-600 text-base leading-relaxed prose prose-base max-w-none line-clamp-3">
                      <PortableText value={post.text} />
                    </div>
                  </div>
                </a>
              </article>
            );
          })
        }
      </div>

      <!-- Right scroll arrow -->
      <button
        id="scroll-right"
        class="absolute right-4 top-1/2 -translate-y-1/2 z-10 bg-white/20 hover:bg-white/40 rounded-full p-3 transition-all duration-300 backdrop-blur-sm md:flex hidden items-center justify-center"
        aria-label="Scroll right"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          class="text-gray-800"
        >
          <path d="m9 18 6-6-6-6"></path>
        </svg>
      </button>

      <!-- Mobile right scroll arrow -->
      <button
        id="scroll-right-mobile"
        class="absolute right-2 top-1/2 -translate-y-1/2 z-10 bg-white/80 hover:bg-white rounded-full p-2 shadow-md md:hidden"
        aria-label="Scroll right"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="20"
          height="20"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
        >
          <path d="m9 18 6-6-6-6"></path>
        </svg>
      </button>
    </div>
  </section>

  <script is:inline>
    // Function to initialize the scroll arrows
    function initScrollArrows() {
      console.log('Initializing scroll arrows');
      const container = document.getElementById('articles-container');
      const leftBtn = document.getElementById('scroll-left');
      const rightBtn = document.getElementById('scroll-right');
      const leftBtnMobile = document.getElementById('scroll-left-mobile');
      const rightBtnMobile = document.getElementById('scroll-right-mobile');
      const articles = container?.querySelectorAll('article');

      if (container && articles?.length) {
        const isMobile = () => window.innerWidth < 768;
        
        // Function to scroll to a specific article
        const scrollToArticle = (index) => {
          if (articles[index]) {
            if (isMobile()) {
              // Mobile: jump to card
              articles[index].scrollIntoView({
                behavior: 'smooth',
                block: 'nearest',
                inline: 'center',
              });
            } else {
              // Desktop: smooth scroll to bring next card into view
              const articleRect = articles[index].getBoundingClientRect();
              const containerRect = container.getBoundingClientRect();
              const scrollAmount = articleRect.left - containerRect.left + container.scrollLeft - 16; // 16px offset
              
              container.scrollTo({
                left: scrollAmount,
                behavior: 'smooth'
              });
            }
          }
        };

        // Find the current centered article index
        const getCurrentArticleIndex = () => {
          const containerRect = container.getBoundingClientRect();
          const containerCenter = containerRect.left + containerRect.width / 2;

          let closestIndex = 0;
          let closestDistance = Number.MAX_VALUE;

          articles.forEach((article, index) => {
            const articleRect = article.getBoundingClientRect();
            const articleCenter = articleRect.left + articleRect.width / 2;
            const distance = Math.abs(containerCenter - articleCenter);

            if (distance < closestDistance) {
              closestDistance = distance;
              closestIndex = index;
            }
          });

          return closestIndex;
        };

        // Get the leftmost visible article index for desktop
        const getLeftmostVisibleIndex = () => {
          const containerRect = container.getBoundingClientRect();
          const containerLeft = containerRect.left;

          for (let i = 0; i < articles.length; i++) {
            const articleRect = articles[i].getBoundingClientRect();
            if (articleRect.right > containerLeft + 50) { // 50px threshold
              return i;
            }
          }
          return 0;
        };

        // Handle left arrow click
        const handleLeftClick = () => {
          console.log('Left arrow clicked');
          if (isMobile()) {
            const currentIndex = getCurrentArticleIndex();
            const prevIndex = Math.max(0, currentIndex - 1);
            scrollToArticle(prevIndex);
          } else {
            const currentIndex = getLeftmostVisibleIndex();
            const prevIndex = Math.max(0, currentIndex - 1);
            scrollToArticle(prevIndex);
          }
        };

        // Handle right arrow click
        const handleRightClick = () => {
          console.log('Right arrow clicked');
          if (isMobile()) {
            const currentIndex = getCurrentArticleIndex();
            const nextIndex = Math.min(articles.length - 1, currentIndex + 1);
            scrollToArticle(nextIndex);
          } else {
            const currentIndex = getLeftmostVisibleIndex();
            const nextIndex = Math.min(articles.length - 1, currentIndex + 1);
            scrollToArticle(nextIndex);
          }
        };

        // Add event listeners
        if (leftBtn) leftBtn.addEventListener('click', handleLeftClick);
        if (rightBtn) rightBtn.addEventListener('click', handleRightClick);
        if (leftBtnMobile) leftBtnMobile.addEventListener('click', handleLeftClick);
        if (rightBtnMobile) rightBtnMobile.addEventListener('click', handleRightClick);

        // Show/hide arrows based on scroll position
        const updateArrowVisibility = () => {
          const isAtStart = container.scrollLeft <= 10;
          const isAtEnd = container.scrollLeft >= container.scrollWidth - container.clientWidth - 10;
          
          // Desktop arrows
          if (leftBtn) leftBtn.style.opacity = isAtStart ? '0.3' : '1';
          if (rightBtn) rightBtn.style.opacity = isAtEnd ? '0.3' : '1';
          
          // Mobile arrows
          if (leftBtnMobile) leftBtnMobile.style.opacity = isAtStart ? '0.3' : '1';
          if (rightBtnMobile) rightBtnMobile.style.opacity = isAtEnd ? '0.3' : '1';
        };

        // Initial visibility
        updateArrowVisibility();

        // Update on scroll
        container.addEventListener('scroll', () => {
          requestAnimationFrame(updateArrowVisibility);
        });

        // Update on resize
        window.addEventListener('resize', updateArrowVisibility);
      }
    }

    // Initialize on page load
    document.addEventListener('DOMContentLoaded', initScrollArrows);

    // Re-initialize on Astro view transitions
    document.addEventListener('astro:page-load', initScrollArrows);
    document.addEventListener('astro:after-swap', initScrollArrows);
  </script>
</Layout>
